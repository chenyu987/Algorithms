

/**
* Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.
* 
* Example:
* 
* Input: "babad"
* 
* Output: "bab"
* 
* Note: "aba" is also a valid answer.
* Example:
* 
* Input: "cbbd"
* 
* Output: "bb"
*
* follow up: what if multiple results exist? return all longest results.  
*/


/*
solution 1
复杂度
时间O(n^2) 空间O(n)
思路:中心扩散
对于每个子串的中心（可以是一个字符，或者是两个字符的间隙，比如串abc,中心可以是a,b,c,或者是ab的间隙，bc的间隙）往两边同时进行扫描，直到不是回文串为止。
假设字符串的长度为n,那么中心的个数为2*n-1(字符作为中心有n个，间隙有n-1个）。对于每个中心往两边扫描的复杂度为O(n),所以时间复杂度为O((2*n-1)*n)=O(n^2),空间复杂度为O(1)
follow up: 维护一个集合 如果当前回文长度等于最长 就把该回文加入集合 如果更长 就清空集合 加入当前回文 
list.removeAll;    list.remove(idx);
*/


b    a     b   a    d
0 1  2  3  4


public class LongestPalindromicSubstring {
  public String longestPalindrome(String s) {
    if (s == null || s.length() == 0) return "";
    int maxLen = 0;
    String res = "";
    
    for (int i = 0; i < 2*s.length()-1; i++) {
      int left = i/2;
      int right = i/2;
      if (i % 2 == 1) {
        right++;
      }
      String str = formPalin(s, left, right);
      if (str.length() > maxLen) {
        res = str;
        maxLen = str.length();
      }
    }
    return res;
  }
  
  private String formPalin(String s, int left, int right) {
    while (left >= 0 && right < s.length()) {
      if (s.charAt(left) != s.charAt(right)) break;
      left--;
      right++;
    }
    return s.substring(left+1, right);
  }
}


public class Solution {
    String longest = "";
    
    public String longestPalindrome(String s) {
        for(int i = 0; i < s.length(); i++){
            //计算奇数子字符串
            helper(s, i, 0);
            //计算偶数子字符串
            helper(s, i, 1);
        }
        return longest;
    }
    
    private void helper(String s, int idx, int offset){
        int left = idx;
        int right = idx + offset;
        while(left>=0 && right<s.length() && s.charAt(left)==s.charAt(right)){
            left--;
            right++;
        }
        // 截出当前最长的子串
        String currLongest = s.substring(left + 1, right);
        // 判断是否比全局最长还长
        if(currLongest.length() > longest.length()){
            longest = currLongest;
        }
    }
}



//dp法 
public String longestPalindrome(String s) {
        if(s==null || s.length()==0) return "";
        int len = s.length();
        int maxlen = 0;
        int maxstart = 0;
        boolean[][] dp = new boolean[len][len];
        
        for(int k=0; k<len; k++){
            for(int j=0; j<len; j++){
                if(k == j) dp[j][k] = true;
                //else dp[j][k] = false;
            }
        }
        
        for(int i = 1; i < len; i++){ //length 
            for(int j = 0; j + i < len; j++){ //position
                if(s.charAt(j) == s.charAt(j+i)){
                    dp[j][j+i] = dp[j+1][j+i-1]; //  c b a b c
                }
                if(dp[j][j+i] && (i+1)>maxlen){
                    maxlen = i+1;
                    maxstart = j;
                    
                }
            }
        }
        return s.substring(maxstart, maxlen+maxstart);
    }
    
// Multiply Strings
// Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.

// Note:

// The length of both num1 and num2 is < 110.
// Both num1 and num2 contains only digits 0-9.
// Both num1 and num2 does not contain any leading zero.
// You must not use any built-in BigInteger library or convert the inputs to integer directly.

num1 = "15" 
num2 = "16"
----------
        90
       15
-----------

       
        
       [0, 14, 1]
       
       2,4,0
       
return "121"

 public class Solution {
    public String multiplyString(String num1, String num2) {   
        if (num1 == "0" || num2 == "0") return "0";
        String str1 = StringBuilder(num1).reverse().toString(); //51  31
        String str2 = StringBuilder(num2).reverse().toString();
        int[] res = new int[str1.length() + str2.length()]; //!!!注意生成长度
        for (int i = 0; i < str1.length(); i++) {
            for (int j = 0; j <str2.length(); j ++){
                res[i + j] += (str1.charAt(i) - '0') * (str2.charAt(j) - '0'); // including carry.
            }
        }
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < res.length; i++) {
            int mod = res[i] % 10;
            int carry = res[i] / 10;
            // important
            if (i < res.length - 1) { 
                res[i + 1] += carry;
            }
            result.insert(0, mod);
        }
        // remove 0 in the front.因为存在，多生成了1位结果数组的长度, eg: 11*11 --> 0121。
        while (result.charAt(0) == '0') {
            result.deletecharAt(0);
        }
        return result.toString();
    }
}    



// One Edit Distance
// Given two strings S and T, determine if they are both one edit distance apart.


   add/delete
1. S: abc
   T: abcd

   change
2. S: abd
   T: abc


else: 
  return false


public class Solution {
    public boolean oneEditDistance(String s, String t) {
        if (s == null || t == null) return false;
        if (t.length() > s.length()) { //替换一下t跟s的位置，保证t的长度一定大于等于s
            String tmp = t;
            t = s;
            s = tmp;
        }
        if (t.length() - s.length() > 1) {
            return false;
        }
        if (t.length() == s.length) {
            for (int i = 0; i < t.length; i++) {
                if (t.charAt(i) != s.charAt(i)) {
                    // Question, what is simple substring from i+1 to end wrote:yes
                    // return t.substring(i + 1, t.length() - 1).equals(s.substring(i + 1, s.length() - 1));
                    // ==是比较value是不是一样 .equals是比较内容是否一样。因为两个string的reference不一样。
                    int m, int n.   .name .age .ID
                    return t.substring(i + 1).equals(s.substring(i + 1)); //
                }    
            }
        }
        if (t.length() - s.length() == 1) {
            for (int i = 0; i < t.length(); i++) {
                if(t.charAt(i) != s.charAt(i)) {
                    return t.substring(i + 1).equals(s.substring(i));
                }
            }
        }
        // This is the circumstance that both strings are exactly the same, return FALSE; eg: abc,   abc
        return false; 
    }
}

/*
242 Valid Anagram

Valid Anagram
Given two strings s and t, write a function to determine if t is an anagram of s.

For example, s = "anagram", t = "nagaram", return true. s = "rat", t = "car", return false.

Note: You may assume the string contains only lowercase alphabets.

*/

hashmap?

// Method 1: Sort
// Time: O(nlogn) O(n)

public boolean validAnagram(String s, String t) {
  //如何排序string
  char[] sArray = s.toCharArray();
  char[] tArray = t.toCharArray();
  Arrays.sort(sArray); 
  Arrays.sort(tArray);
  return sArray.toString().equals(tArray.toString());
}



// Method 2: Hash
// Time: O(n)  Space:O(n)
public boolean validAnagram(String s, String t) {
  HashMap<Character, Integer> map = new HashMap<Character, Integer>();
  char[] sArray = s.toCharArray();
  char[] tArray = t.toCharArray();
  for (char c: sArray) {
    if (map.containsKey(c)) {
      map.put(c, map.get(c) + 1);
    } else {
      map.put(c, 1);
    }
  }
  for (char c: tArray) {
    if (map.containsKey(c)) {
      map.put(c, map.get(c) - 1);
    } else {
      return false；
    }
  }
  for (char c: map.keySet()) { //这是遍历map的key
    if (map.get(c) != 0) return false;
  }
  return true;
}

s = "rat", t = "ra"

[r:1, a: 1, t:1]


/*
Given a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last word in the string.

If the last word does not exist, return 0.

Note: A word is defined as a character sequence consists of non-space characters only.

For example, Given s = "Hello World", return 5
*/



API法
复杂度
时间 O(N) 空间 O(N)

思路
简单的使用API。先trim再split再用length。

代码
public class Solution {
    public int lengthOfLastWord(String s) {
        return s.trim().split(" +")[s.trim().split(" +").length - 1].length();
    }
}
双指针法
复杂度
时间 O(N) 空间 O(1)

思路
从后往前看字符串，跳过所有空格后，记下该结束位置，再到下一个空格，再记录一个开始位置，则长度就是结束位置减去开始位置。在跳过空格的循环后，要判断是否已经超界，如果超界则返回0

代码
public class Solution {
    public int lengthOfLastWord(String s) {
        int idx = s.length() - 1;
        // 跳过末尾的空格
        while(idx >= 0){
            if(s.charAt(idx) != ' ') break;
            idx--;
        }
        // 记录结束位置
        int end = idx;
        // 如果已经超界返回0. eg: "       "
        if(idx < 0) return 0;  
        // 找到开始位置
        while(idx >= 0){
            if(s.charAt(idx) == ' ') break;
            idx--;
        }
        return end - idx;
    }
}

Hello World    "
     idx
          end
          
/*         
Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

For example,
"A man, a plan, a canal: Panama" is a palindrome.
"race a car" is not a palindrome.
*/


"A man, a plan, a canal: Panama"
   h
                             t


public class Solution {
    public boolean isPalindrome(String s) {
        if (s.isEmpty()) {
          return true;
        }
        int head = 0, tail = s.length() - 1;
        char cHead, cTail;
        while(head <= tail) {
          cHead = s.charAt(head);
          cTail = s.charAt(tail);
          if (!Character.isLetterOrDigit(cHead)) { // Character.isLetterOrDigit(c);
            head++;
          } else if(!Character.isLetterOrDigit(cTail)) {
            tail--;
          } else {
            if (Character.toLowerCase(cHead) != Character.toLowerCase(cTail)) { //Character.toLowerCase(c);
              return false;
            }
            head++;
            tail--;
          }
        }
        
        return true;
    }
}


RepeatedSubstringPattern
/*

Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.

Example 1:
Input: "abab"

Output: True

Explanation: It's the substring "ab" twice.
Example 2:
Input: "aba"

Output: False
Example 3:
Input: "abcabcabcabc"

Output: True

Explanation: It's the substring "abc" four times. (And the substring "abcabc" twice.)

*/


public boolean repeatedSubstring(String s) {
  int[] sArray = s.toCharArray();
  for (int i = 2; i <= s.length / 2; i++) { //i表示重复几次
    if (sArray.length % i != 0) continue;
    int len = sArray.length/i; //表示substring长度
    for (int j = len; j < sArray.length - len; j+= len) {
      if (s.substring(j, j + len).equals(s.substring(j - len, j)) continue;
      else break;
    }
    return true;
  }
  return false;
}

      j         
a b c a b c a b c
i= 2

substring: [abcab] [bcabc]
break;


i=3
substring: [abc] [abc] [abc]
return true

len: 3

if: 
next[len] != 0 && next[len] % (len - next[len]) == 0 
=> true

a b c a b c a b c



// Compare two version numbers version1 and version2.
// If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.

// You may assume that the version strings are non-empty and contain only digits and the . character.
// The . character does not represent a decimal point and is used to separate number sequences.
// For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

// Here is an example of version numbers ordering:

version1:  ”10.4.1.0.0.0.0.0“  
version2:  ”10.4.1"


public int compareVersion(String version1, String version2) {
    
    String[] v1 = version1.split("\\.");\\是转义字符。所以“\\.”表示.
    String[] v2 = version2.split("\\.");
    
    for ( int i = 0; i < Math.max(v1.length, v2.length); i++ ) {
        int num1 = i < v1.length ? Integer.parseInt( v1[i] ) : 0; // Integer.parseInt( str );
        int num2 = i < v2.length ? Integer.parseInt( v2[i] ) : 0;
        if ( num1 < num2 ) {
            return -1;
        } else if ( num1 > num2 ) {
            return +1;
        }
    } 
    
    return 0;
}


/*
Given two strings s and t, determine if they are isomorphic.

Two strings are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.

For example,
Given "egg", "add", return true.

Given "foo", "bar", return false.

Given "paper", "title", return true.
*/

d -> g
t -> p

public class Solution {
    public boolean isIsomorphic(String s, String t) {
        if(s == null || s.length() <= 1) return true;
        HashMap<Character, Character> map = new HashMap<Character, Character>();
        for(int i = 0 ; i< s.length(); i++){
            char a = s.charAt(i);
            char b = t.charAt(i);
            if(map.containsKey(a)){
                if(map.get(a) == b) 
                continue;
                else
                return false;
            }else{
                if(!map.containsValue(b))
                map.put(a,b);
                else return false;
                
            }
        }
        return true;
    }
}