dfs backtracking模板

public List<List<Integer>> model(input) {
    ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
    if (sanity check) return result;
    // sometimes need to sort to help check duplication
    Arrays.sort(nums);
    //   输入值     offset 放答案    每次循环记录本层循环答案的tmp 
    dfs(nums, target, 0, result, new ArrayList<Integer>());
    return result;
}
//                          要达到的值，可能会和原始target不一样
//              当开始输入值不是nuns数组而是整数是他可能也在backing时候变，看combination sumIII
private void dfs(int[] nums, int target, int offset, ArrayList<ArrayList<Integer>> result, ArrayList<Integer> tmp) {
    // 临界条件
    if (target < 0) {
        return;
    }
    // 临界条件
    else if (target == 0) {
        // have to create a new ArrayList
        result.add(new ArrayList<Integer>(tmp));
        return;
    } 
    else {
        // dfs的难点也是精髓，backtracking过程
        // i的起始点要注意
        for (int i = offset; i < nums.length; i++) {
            // important: check duplication, this means we one use the element that has this value once (same as permutationsII)
            // 用这个来remove duplication in the nums given
            // 在permutation里面，也是这里做查重操作，只是他会在一个tmp里看是否存在
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            tmp.add(nums[i]);
            // important: check offset +1? +1means it cannot count itself anymore, no +1 means it can still be used
            // combinationsum1&2分别需要i+1和保持i
            // 如果结果无序，那么连i也不需要 eg. permutation
            dfs(nums, target - num[i], i, result, tmp);
            tmp.remove(tmp.size() - 1);
        }
    }
}



  /*
Combinations
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example, If n = 4 and k = 2, a solution is:
[1, 2, 3 ,4]
    
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

*/

public List<List<Integer>> combi(int n, int k) {
  List<List<Integer>> res = new ArrayList<List<Integer>>();
  if (n <= 0 || n < k) return res;
  
  helper(1, n, k, new ArrayList<Integer>(), res);
  return res;
}

private void helper(int start, int n, int k, List<Integer> tmp, List<List<Integer>> res) {
  //临界条件
  if (tmp.size() == k) {
    //*
    res.add(new ArrayList<Integer>(tmp));
    return;
  }
  for (int i = start; i <= n; i++) {
    tmp.add(i);
    helper(i+1, n, k, tmp, res);
    tmp.remove(tmp.size()-1);
  }
}
                     

// Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

// The same repeated number may be chosen from C unlimited number of times.

// Note: All numbers (including target) will be positive integers. Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak). The solution set must not contain duplicate combinations. For example, given candidate set 2,3,6,7 and target 7, A solution set is:

nums = {2,3,6,7}, target = 7

// [7] 
// [2, 2, 3]



public List<List<Integer>> combinationSum(int[] nums, int target) {
    ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
    if (nums == null || nums.length == 0) return result;
    // need to sort to help check duplication
    Arrays.sort(nums);
    dfs(nums, target, 0, result, new ArrayList<Integer>());
    return result;
}

private void dfs(int[] nums, int target, int offset, ArrayList<ArrayList<Integer>> result, ArrayList<Integer> tmp) {
    if (target < 0) {
        return;
    }
    // 临界条件
    else if (target == 0) {
        // have to create a new ArrayList
        result.add(new ArrayList<Integer>(tmp));
        return;
    } 
    else {
        for (int i = offset; i < nums.length; i++) {
            // important: check duplication, this means we one use the element that has this value once (same as permutationsII)
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            tmp.add(nums[i]);
            // important: check offset +1? +1means it cannot count itself anymore, no +1 means it can still be used
            dfs(nums, target - num[i], i, result, tmp);
            tmp.remove(tmp.size() - 1);
        }
    }
}

                       
// Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

// Each number in C may only be used once in the combination.

// Note: All numbers (including target) will be positive integers.
// Elements in a combination (a1, a2, … , ak) must be in non-descending
// order. (ie, a1 ≤ a2 ≤ … ≤ ak). The solution set must not contain
// duplicate combinations. For example, given candidate set
// 10,1,2,7,6,1,5 and target 8, A solution set is:

// [1, 7] 
// [1, 2, 5] 
// [2, 6] 
// [1, 1, 6]
// 深度优先搜索
// 复杂度
// 时间 O(N!) 空间 O(N) 递归栈空间

// 思路
// 这题和I的区别在于同一个数只能取一次，比如数组中只有3个1，那结果中也最多只有3个1，而且结果也不能重复。所以我们在递归时首先要把下标加1，这样下轮搜索中就排除了自己。其次，对一个数完成了全部深度优先搜索后，比如对1完成了搜索，那么我们要把后面的1都跳过去。当然，跳过只是针对本轮搜索的，在对第一个1的下一轮的搜索中，我们还是可以加上第二个1。只是我们不能再以第二个1开头了而已。为了能连续跳过重复的数，这里我们必须先排序。

// 代码

// 10,1,2,7,6,1,5 and target 8, A solution set is:

// [1, 7] 
// [1, 2, 5] 
// [2, 6] 
// [1, 1, 6]


public class Solution {
    
    List<List<Integer>> res;
    
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        res = new LinkedList<List<Integer>>();
        List<Integer> tmp = new LinkedList<Integer>();
        Arrays.sort(candidates);
        helper(candidates, target, 0, tmp);
        return res;
    }
    
    private void helper(int[] nums, int target, int index, List<Integer> tmp){
        if(target < 0){
            return;
        } else if(target == 0){
            List<Integer> oneComb = new LinkedList<Integer>(tmp);
            res.add(oneComb);
        } else {
            for(int i = index; i < nums.length; i++){
                tmp.add(nums[i]);
                // 递归时下标加1
                helper(nums, target - nums[i], i+1, tmp);
                tmp.remove(tmp.size() - 1);
                // 跳过本轮剩余的重复元素
                while(i < nums.length - 1 && nums[i] == nums[i + 1]){
                    i++;
                }
            }
        }
    }
}
// 10,1,2,7,6,1,5 and target 8, A solution set is:

[1, 1, 2, 5, 6, 7, 10]



// [1, 7] 
// [1, 2, 5] 
// [2, 6] 
// [1, 1, 6]

                  
  // Combination Sum III
// Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

// Ensure that numbers within the set are sorted in ascending order.

// Example 1:

// Input: k = 3, n = 7
// Output:



// [[1,2,4]]
// Example 2:

// Input: k = 3, n = 9
// Output:



// [[1,2,6], [1,3,5], [2,3,4]]
// 深度优先搜索
// 复杂度
// 时间 O(9!) 空间 O(9) 递归栈空间

// 思路
// 这题其实是II的简化版，设想一个[1,2,3,4,5,6,7,8,9]的数组，同样一个元素只能取一次，但是已经预先确定没有重复了。所以可以省去跳过重复元素的部分。不过，我们在递归的时候要加一个额外的变量k来控制递归的深度，一旦超过了预设深度，就停止该分支的搜索。本质上是有限深度优先搜索。

// 代码
// from the template version wrote by myself
public List<List<Integer> combinationSum3(int k, int n) {
    ArrayList<ArrayList<Integer>> result = ArrayList<ArrayList<Integer>();
    if (k < 0) return result;
    helper(k, n, 1, new ArrayList<Integer>(), result);
    return result;
}

private void helper(int k, int n, int start, ArrayList<Integer> tmp, ArrayList<ArrayList<Integer> result) {//start is for offset for order
    if (n < 0 || k < 0) { //exit for the backtrack
        return;
    }
    else if (n == 0 && k == 0) { //this is when the sub-result is complete
        result.add(new ArrayList<Integer>(tmp));
    }
    else {
        for (int i = start; i <= 9; i++) {
            tmp.add(i); //try i.
            //*这个i + 1代表他不能被重复利用
            helper(k - 1, n - i, i + 1，tmp, result); 
            tmp.remove(tmp.size() - 1); //!!!have to remove this i from the temp, and iterate again.
        }
    }
    
}




// Given a collection of distinct numbers, return all possible permutations.

// For example,
// [1,2,3] have the following permutations:
// [
//   [1,2,3],
//   [1,3,2],
//   [2,1,3],
//   [2,3,1],
//   [3,1,2],
//   [3,2,1]
// ]


public class Solution {
    public List<List<Integer>> permute(int[] nums) {//!!generic type泛型
         List<List<Integer>> rst = new ArrayList<List<Integer>>(); 
         if (nums == null) {
             return rst; 
         }
         
         if (nums.length == 0) {
            rst.add(new ArrayList<Integer>());
            return rst;
         }

         // ArrayList<Integer> tmp = new ArrayList<Integer>();
         // helper(rst, tmp, nums);

         helper(rst, new ArrayList<Integer>(), nums); //if the res list is without order, no need for the flag start
         return rst;
    }
    
    public void helper(ArrayList<List<Integer>> rst, ArrayList<Integer> list, int[] nums){
        if(list.size() == nums.length) { 
            rst.add(new ArrayList<Integer>(list));
            return; //return!!!!!!!!
        }
        
        for(int i = 0; i < nums.length; i++){
            if(list.contains(nums[i])){ //因为无序，所以得查重
                continue;
            }
            // 因为结果里咩有顺序所以不用offset
            list.add(nums[i]);
            helper(rst, list, nums);
            list.remove(list.size() - 1);
        }
        
    }
}

Queue<泛型> --> interface
List  --> interface
Set --> interface
//(Vector --> interface) <-- Stack is a class, inherited from Vector


/**
* Given a collection of numbers that might contain duplicates, return all possible unique permutations.
* 
* For example,
* [1,1,2] have the following unique permutations:
* [
*   [1,1,2],
*   [1,2,1],
*   [2,1,1]
* ]
*/

   public List<List<Integer>> permuteUnique(int[] nums) {
    
        ArrayList<List<Integer>> results = new ArrayList<List<Integer>>();
    
        if (nums == null) { // ?
            return results; //[]
        }
    
        if(nums.length == 0) { // ?
            results.add(new ArrayList<Integer>());//[[]]
            return results;
        }

        Arrays.sort(nums); //!!!!数组可能无序
        ArrayList<Integer> list = new ArrayList<Integer>();
        int[] visited = new int[nums.length];
        for ( int i = 0; i < visited.length; i++){
            visited[i] = 0;
        }
     
        helper(results, list, visited, nums);// visited!!!!
        return results;
    }
    
    
    public void helper(ArrayList<List<Integer>> results, 
                   ArrayList<Integer> list, int[] visited, int[] nums) {
        
        if(list.size() == nums.length) { 
            results.add(new ArrayList<Integer>(list)); //ArrayList指向地址. 需要copy一个当前值.
            return; //need return
        }
        
        for(int i = 0; i < nums.length; i++) {
            if ( visited[i] == 1 || ( i != 0 && nums[i] == nums[i - 1]
            && visited[i-1] == 0)){
                continue;
            }
            /*
            上面的判断主要是为了去除重复元素影响。
            比如，给出一个排好序的数组，[1,2,2]，那么第一个2和第二2如果在结果中互换位置，
            我们也认为是同一种方案，所以我们强制要求相同的数字，原来排在前面的，在结果
            当中也应该排在前面，这样就保证了唯一性。所以当前面的2还没有使用的时候，就
            不应该让后面的2使用。
            */
            visited[i] = 1;
            list.add(nums[i]);
            helper(results, list, visited, nums);
            list.remove(list.size() - 1);//复原
            visited[i] = 0;//复原
        }
     } 






/**
* Given a set of distinct integers, nums, return all possible subsets.
* 
* Note: The solution set must not contain duplicate subsets.
* 
* For example,
* If nums = [1,2,3], a solution is:
* 
* [
*   [3],
*   [1],
*   [2],
*   [1,2,3],
*   [1,3],
*   [2,3],
*   [1,2],
*   [] 
* ]
*/



public List<List<Integer>> subsets(int[] nums) {
  List<List<Integer>> res = new ArrayList<List<Integer>>();
  if (nums == null || nums.length == 0) return res;
  helper(nums, res, 0, new ArrayList<Integer>());
  return res;
}

private void helper(int[] nums, List<List<Integer>> res, int idx, List<Integer> tmp) {
  if (idx == nums.length) return; //
  res.add(new ArrayList<Integer>(tmp)); // !!!每一次都加一个sub—result
  for(int i = idx; i < nums.length; i++) {
    tmp.add(nums[i]);
    helper(nums, res, i + 1, tmp);
    tmp.remove(tmp.size() - 1);
  }
}


// Given a collection of integers that might contain duplicates, S, return all possible subsets. Note: Elements in a subset must be in non-descending order. The solution set must not contain duplicate subsets. For example, If S = [1,2,2], a solution is: [ [2], [1], [1,2,2], [2,2], [1,2], [] ]

public ArrayList<ArrayList<Integer>> subsetsWithDup(int[] nums) {
  ArrayList<ArrayList<Integer>> result = new ArrayList<>();
  if (nums == null) {
    return result;
  }
  if (nums.length == 0) {
    result.add(new ArrayList<Integer>());
    return result;
  }
  Arrays.sort(nums);
  helper(nums, 0, new ArrayList<Integer>(), result);
  return result;
}

public void helper(int[] nums, int offset, ArrayList<Integer> tmp, ArrayList<List<Integer>> result) {
  if (offset >= nums.length) return; //
  result.add(new ArrayList<Integer>(tmp)); //
  for (int i= offset; i < nums.length; i++) {
    if (i != offset && nums[i] == nums[i - 1]) {
      continue;
    }
    tmp.add(nums[i]);
    helper(nums, i + 1, tmp, result);
    tmp.remove(tmp.size() - 1);
  }
}


