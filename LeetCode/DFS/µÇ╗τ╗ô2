
// DFS
// Type II: Non-Backtracking


Experience:
1.dfs不用backtracking的这一类题一般都会给你一个矩阵，让你在这个矩阵里找到一个符合规定的点后找相邻的点
2.这一类题一般在搜索中没有回溯的过程，深度搜到底后不回去，所以一般会用一个visited数组来记录已经被搜过的点（也看情况，比如wordsearch那题就需要每次搜完把visited深搜过得数标回false）



/**
朋友圈 friend circle
* There are N students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. For example, if A is a direct friend of B, and B is a direct friend of C, then A is an indirect friend of C. And we defined a friend circle is a group of students who are direct or indirect friends.
* 
* Given a N*N matrix M representing the friend relationship between students in the class. If M[i][j] = 1, then the ith and jth students are direct friends with each other, otherwise not. And you have to output the total number of friend circles among all the students.
* 
* Example 1:
* Input: 
* [[1,1,0],
*  [1,1,0],
*  [0,0,1]]
* Output: 2
* Explanation:The 0th and 1st students are direct friends, so they are in a friend circle. 
* The 2nd student himself is in a friend circle. So return 2.
* Example 2:
* Input: 
* [[1,1,0],
*  [1,1,1],
*  [0,1,1]]
* Output: 1
* Explanation:The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends, 
* so the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.
* Note:
* N is in range [1,200].
* M[i][i] = 1 for all students.
* If M[i][j] = 1, then M[j][i] = 1.
*/

* [[1,1,0],
*  [1,1,0],
*  [0,0,1]]


* [[1,1,0], 
   [1,1,1],
   [0,1,1]]


public class FriendCircles {
  public int findCircleNum(int[][] M) {
    if (M == null || M.length == 0) return 0;
    int numOfCircles = 0;
    boolean[] visited = new boolean[M.length];
    for (int i = 0; i < M.length; i++) {
      if (!visited[i]) {
        numOfCircles++;
        visited[i] = true;
        // 在 比如 找0th person的过程中 我们把oth person的circle算成一个，然后找oth person的朋友圈，然后我们通过visited数组把这个圈里的人都标true了，所以以后标true的不会被便利到
        expandCircle(M, visited, i);
      }
     }
    return numOfCircles;
  }
  
  private void expandCircle(int[][] M, boolean[] visited, int stdNum) {
    for (int col = 0; col < M[0].length; col++) {
      // 首先 这个人要没被visited过&&不能使本人&&和第i个人，也就是我们当然要查找的人认识
      if (!visited[col] && col != stdNum && M[stdNum][col] == 1) {
        visited[col] = true;
        //我们就要接着往下查，把同一个friend circle的人都找出来
        expandCircle(M, visited, col);
      }
    }  
  }
} 

// Number of Islands
// Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

// Example 1:

// 11110
// 11010
// 11000
// 00000
// Answer: 1

// Example 2:

// 11000
// 11000
// 00100
// 00011
// Answer: 3



public class Solution {
    public int numIslands(char[][] grid) {
        int res = 0;
        if(grid.length==0) return res;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j]=='1'){
                    searchIsland(grid, i, j);
                    res++;
                }
            }
        }
        return res;
    }
    
    private void searchIsland(char[][] grid, int i, int j){
        grid[i][j]='0';
        // 搜索该点连通的上下左右
        if(i>0 && grid[i-1][j]=='1') searchIsland(grid, i-1, j);
        if(j>0 && grid[i][j-1]=='1') searchIsland(grid, i, j-1);
        if(i<grid.length-1 && grid[i+1][j]=='1') searchIsland(grid, i+1, j);
        if(j<grid[0].length-1 && grid[i][j+1]=='1') searchIsland(grid, i, j+1);
    }
}

//revised
class Solution {
    public int numIslands(char[][] grid) {
        int result = 0;
        int[] di = {0, 1, 0, -1};
        int[] dj = {-1, 0, 1, 0};
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == '1') {
                    result++;
                    dfs(grid, di, dj, i, j);
                }
            }
        }
        return result;
    }
    
    private void dfs(char[][] grid,int[] di, int[]dj, int i, int j) {
        grid[i][j] = '0';
        for (int k = 0; k < 4; k++){
            int newi = i + di[k];
            int newj = j + dj[k];
            if (newi < 0 || newi > grid.length - 1 || newj < 0 || newj > grid[0].length - 1) continue;
            else {
                if (grid[newi][newj] == '1') {
                    dfs(grid, di, dj, newi, newj);
                }
            }
        }
    }
}

Pixels
From my interview with SnapChat


// 22000
// 22000
// 00200
// 00033


public void floodFill(Color[][] image, int x, int y, Color fillColor) {
        if (image == null ) return null;
         Color orgionalColor = image[x][y];
        dfs(image, x, y, fillColor, origionalColor);
}

private void dfs(Color[][] image, int x, int y, Color fillColor, Color origionalColor) {
    image[x][y] = fillColor;
    if (y + 1 <= image.length && image[x][y+1] == origionalColor) dfs(image, x, y + 1, fillColor, origionalColor);
    if (x + 1 <= image[0].length && image[x+1][y]== origionalColor) dfs(image, x + 1, y, fillColor, orgionalColor);
    if (x - 1 >= 0 && image[x-1][y]== origionalColor) dfs(image, x - 1, y, fillColor, origionalColor);
    if (y - 1 >= 0 && image[x][y-1]== origionalColor) dfs(image, x, y - 1, fillColor, origionalColor);
}  





/**
Surrounded Regions
* Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.
* 
* A region is captured by flipping all 'O's into 'X's in that surrounded region.
* 
* For example,
* X X X X
* X O O X
* X X O X
* X O X X
* After running your function, the board should be:
* 
* X X X X
* X X O X
* X O O X
* X O X X
*/



==>


* X X X X
* X X X X
* X O X X
* X O X X
*/

public class SurroundedRegions {
  public void solve(char[][] board) {
    if (board == null || board.length <= 1 || board[0].length <= 1) return;
    int row = board.length;
    int col = board[0].length;
    //dfs处理左右边界上的'O',换成'#'
    for (int i = 0; i < row; i++) {
      if (board[i][0] == 'O') {
        fill(board, i, 0);
      }
      if (board[i][col-1] == 'O') {
        fill(board, i, col-1);
      }
    }
    // dfs处理上下边界上的'O',换成'#'
    for (int j = 0; j < col; j++) {
      if (board[0][j] == 'O') {
        fill(board, 0, j);
      }
      if (board[row-1][j] == 'O') {
        fill(board, row-1, j);
      }
    }
    // 把没有被染色的'O',换成'X'
    for (int i = 0; i < row; i++) {
      for (int j = 0; j < col; j++) {
        if (board[i][j] == 'O') {
          board[i][j] = 'X';
        }
      }
    }
     // 把被染色成'#',换回'O'
    for (int i = 0; i < row; i++) {
      for (int j = 0; j < col; j++) {
        if (board[i][j] == '#') {
          board[i][j] = 'O';
        }
      }
    }
  }
  
  private void fill(char[][] board, int i, int j) {
    if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != 'O') return;
    board[i][j] = '#';
    // 向上染色
    if (i - 1 >= 0 && board[i-1][j] == 'O') {
      fill(board, i-1, j);
    }
    // 向下染色
    if (i + 1 < board.length && board[i+1][j] == 'O') {
      fill(board, i+1, j);
    }
    // 向左染色
    if (j - 1 >= 0 && board[i][j-1] == 'O') {
      fill(board, i, j-1);
    }
    // 向右染色
    if (j + 1 < board[0].length && board[i][j+1] == 'O') {
      fill(board, i, j+1);
    }
  }
}






// Word Search
/**
* Given a 2D board and a word, find if the word exists in the grid.
* 
* The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.
* 
* For example,
* Given board =
* 
* [
*   ['A','B','C','E'],
*   ['S','F','C','S'],
*   ['A','D','E','E']
* ]
* word = "ABCCED", -> returns true,
* word = "SEE", -> returns true,
* word = "ABCB", -> returns false.
*/
ABCB


/*
复杂度
时间 O(m^2*n^2) 空间(n*m)
思路： 深搜
从某一个元素出发，往上下左右深度搜索是否有相等于word的字符串
注意每次从一个元素出发时要重置访问标记（虽然单次搜索字符不能重复使用，但是每次从一个新的元素出发，字符可以复用）
follow up: what if char can be used mutiple times?
*/



public boolean exist(char[][] board, String word) {
  if (board == null || board.length == 0) return false;
  if (word == null || word.length() == 0) return true;
  boolean[][] visited = new boolean[board.length][board[0].length];
  for (int i = 0; i < board.length; i++) {
    for (int j = 0; j < board[0].length; j++) {
      if (dfs(board, word, visited, i, j, 0) {
        return true;
      }
    }
  }
  return false;
}


private boolean dfs(char[][] board, String word, boolean[][] visited, int i, int j, int len) {
  if (len == word.length()) { //递归出口
    return true;
  }
  if (!visited[i][j] && i >= 0 && i< board.length && j >= 0 && board[0].length && board[x][y] == word.charAt(len) {
  visited[i][j] = true;
  boolean res = dfs[board, word, visited, i + 1, j, len + 1) 
                || dfs[board, word, visited, i - 1, j, len + 1)
                || dfs[board, word, visited, i, j + 1, len + 1)
                || dfs[board, word, visited, i, j - 1, len + 1);
  visited[i][j] = false;
  } else {
    return false;
  }
  return result;
}





写法1 （女生宿舍学校看门老大爷法）
// private void search(char[][] grid, boolean[][] visited, int row, int col) {
//   if (row >= 0 && row < grid.length && col >= 0 && col < grid[0].length && !visited[row][col] && grid[row][col] == '1') {
//     visited[row][col] = true;
//     search(grid, visited, row+1,col);
//     search(grid, visited, row-1,col);
//     search(grid, visited, row,col+1);
//     search(grid, visited, row,col-1);
//   }
// }




写法2 （女生宿舍每个楼宿管阿姨法）
//     private void searchIsland(char[][] grid, int i, int j){
//         grid[i][j]='0';
//         // 搜索该点连通的上下左右
//         if(i>0 && grid[i-1][j]=='1') searchIsland(grid, i-1, j);
//         if(j>0 && grid[i][j-1]=='1') searchIsland(grid, i, j-1);
//         if(i<grid.length-1 && grid[i+1][j]=='1') searchIsland(grid, i+1, j);
//         if(j<grid[0].length-1 && grid[i][j+1]=='1') searchIsland(grid, i, j+1);
//     }
// }

