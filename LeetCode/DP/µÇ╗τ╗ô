


#动态规划四要素 
1.状态:即定义,划分为六大问题
2.方程:即从前一种状态推出现在的状态.
3.初始化:极限小的状态,即为起点.
4.答案:终点

#使用动态规划的三个情况
1.求最值
2.可行性
3.方案个数 (very possible)(except for n-Queen problem(use search))

#不使用动态规划三情况
1.求具体方案但非方案个数（主要用搜索（深度优先））
2.输入数据是集合而非序列 （80%）
3.暴力方法时间已经是多项式级别

#动态规划的问题分类
1.坐标 （15%）
2.单序列 （30%）#序列就是string
3.双序列 （30%）
4.划分型 (10%)
5.背包型 (10%)
5.区间型 (5%)



Climbing Stairs
/**
* You are climbing a stair case. It takes n steps to reach to the top.
* 
* Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
* 
* Note: Given n will be a positive integer.
*/


1 1 1 1 1

1. 
    res[i] = res[i - 1] + res[i - 2]

res[0] = 1
res[1] = 1
res[2] = res[0] + res[1] = 1+1 = 2
return res[n]

public class ClimbingStairs {
  public int climbStairs(int n) {
    if (n < 2) return n;
  int[] res = new int[n+1];//
  res[0] = 1; //
  res[1] = 1;
  for (int i = 2; i <= n; i++) {
    res[i] = res[i-1] + res[i-2];
  }
  return res[n];
  }
} 



Decode Ways
/**
A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.

*/
                      i
  [1 , 2 , 1,     0,  2    1]                
1  1  1+1  2+1    2   2    2+2
1  3  2                        1              
【1，2，1，0】
12,10;    1,2,10

i表示，长度i


public class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        if (n == 0) return 0;
        
        int[] memo = new int[n+1];//dp一般都建个数组。。存状态。
        memo[n]  = 1;
        memo[n-1] = s.charAt(n-1) != '0' ? 1 : 0;
        
        for (int i = n - 2; i >= 0; i--)
            if (s.charAt(i) == '0') continue;
            else memo[i] = (Integer.parseInt(s.substring(i,i+2))<=26) ? memo[i+1]+memo[i+2] : memo[i+1];
        
        return memo[0];
    }
}


/**
* A message containing letters from A-Z is being encoded to numbers using the following mapping:
* 
* 'A' -> 1
* 'B' -> 2
* ...
* 'Z' -> 26
* Given an encoded message containing digits, determine the total number of ways to decode it.
* 
* For example,
* Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).
* 
* The number of ways decoding "12" is 2.
*/

/*
复杂度：
时间O(n) 空间O(n)

思路：dp
res[i]表示前i个字符共有多少解码可能性
1.如果第i个字符(s.charAt(i-1))可以被解码 则res[i] = res[i-1]
2.如果第i-2和第i-1个字符可以被解码，则res[i] += res[i-1]

初始化：
res[0] = 1
res[1] = 1 or 0, 需要判断第一个字符是否在‘A’到‘Z'之间
*/

             1   3  3  0   6  4  3    2
res        1 1   2  2  0   2  
public class DecodeWays {
  public int numDecodings(String s) {
    if(s == null || s.length() == 0) return 0;
    int[] res = new int[s.length()+1];
    res[0] = 1;
    res[1] = isValid(s.substring(0,1)) ? 1 : 0;  
    for (int i = 2; i <= s.length(); i++) {
      if (isValid(s.substring(i-1, i))) {
        res[i] += res[i-1];
      }
      if (isValid(s.substring(i-2, i))) {
        res[i] += res[i-2];
      }
    }
    return res[s.length()];
  }
  private boolean isValid(String str) {
  if (str == null || str.length() == 0) return false;
  if (str.charAt(0) == '0') return false;
  int num = Integer.parseInt(str);
  return num >= 1 && num <= 26;
  }
} 




Minimum Path Sum
// Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

1  1   3   4 
2  3   5   2
3  4   1   3

sum[i][j] = grid[i][j] + Math.min(sum[i-1][j], sum[i][j-1]);

    public int minPathSum(int[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }

        int M = grid.length; //几行
        int N = grid[0].length; //几列
        int[][] sum = new int[M][N];

        sum[0][0] = grid[0][0]; //

        for (int i = 1; i < M; i++) { //第一列
            sum[i][0] = sum[i - 1][0] + grid[i][0];
        }

        for (int i = 1; i < N; i++) { //第一行
            sum[0][i] = sum[0][i - 1] + grid[0][i];
        }

        for (int i = 1; i < M; i++) {
            for (int j = 1; j < N; j++) {
                sum[i][j] = Math.min(sum[i - 1][j], sum[i][j - 1]) + grid[i][j];
            }
        }

        return sum[M - 1][N - 1];
    }

// space O(n)

                 a  b  c  d
          
                  
              
               
public int minPathSum(int[][] grid) {
  if (grid == null || gird.length == 0) return 0;
  int[] res = new int[grid[0].length];
  res[0] = grid[0][0]; //
  for (int j = 1; j < grid[0].length; j++) {//
    res[j] = res[j-1] + grid[0[j];
  }
  
  for (int i = 1; i < grid.length; i++) {
    for (int j = 0; j < gird[0].length; j++) {
      if (j == 0) {
        res[0] += grid[i][0];
      } else {
        res[j] = Math.min(res[j], res[j-1]) + grid[i][j];
      }
    }
  }
  return res[grid[0].length-1];
}




/**
* Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.
* 
* For example, given the following triangle
* [
*      [2],
*     [3,4],
*    [6,5,7],
*   [4,1,8,3]
* ]
* The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).
* 
* Note:
* Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.
*/

* [
*  [2],
*  [3,4],
*  [6,5,7],
*  [4,1,8,3]
* ]


public int minSum(List<List<Integer>> tri) {
  if (tri == null || tri.size() == 0) return 0;
  int row = tri.size();
  int col = row;
  int[][] res = new int[row][col];
  for (int j = 0; j < col; j++) {
    res[row-1][j] = tri.get(row-1).get(j);
  }
  for (int i = row - 2; i >= 0; i++) {
    for (int j = 0; j <= i; j++) {
      res[i][j] = Math.min(res[i+1][j], res[i+1][j+1]) + tri.get(i).get(j); 
    }
  }
  return res[0][0];
}

res[tri.size()]
i -> [row-2, 0]
j -> [0, i]
res[j] = min(res[j], res[j+1]) + 本身



// Unique Paths
/**
* A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
* 
* The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).
* 
* How many possible unique paths are there?
* 
* Above is a 3 x 7 grid. How many possible unique paths are there?
* 
* Note: m and n will be at most 100.
*/


public int uniquePath(int m, int n) {
  int[][] dp = new int[m][n];
  for (int i = 0; i < m; i++) {
    dp[i][0] = 1;
  }
  for (int j = 0; j < n; j++) {
    dp[0][j] = 1;
  }
  for (int i = 1; i < m; i++) {
    for (int j = 1; j < n; j++) {
      dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
    }
  }
  return dp[m - 1][n - 1];
}


/*
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
*/

dp[i][j] = dp[i - 1][j] + dp[i][j - 1];

__(i-1,j-1)_|_B(i-1, j)__
_C_(i,j-1)_ | A (i,j)
  
  A= B+C
public int uniquePathII(int[][] grid) {
  if (grid == null || grid.length == 0 || grid[0].length == 0) return 0;
  int[] res = new int[grid[0].length];
  res[0] = 1;
  for (int i = 0; i < grid.length; i++) {
    for (int j = 0; j< grid[0].length; j++) {
      if (grid[i][j] == 1) {
        res[j] = 0;
      } else {
        res[j] = res[j] + res[j-1]; // A = B + C; 
      }
    }
  }
  return res[gird[0].length-1];
}


public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for(int i = 0; i < m; i++){
            if(obstacleGrid[i][0] == 1) break;
            dp[i][0] = 1;
        }
        for(int i = 0; i < n; i++){
            if(obstacleGrid[0][i] == 1) break;
            dp[0][i] = 1;
        }
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                dp[i][j] = obstacleGrid[i][j] != 1 ? dp[i-1][j] + dp[i][j-1] : 0;
            }
        }
        return dp[m-1][n-1];
    }
}

// 403. Frog Jump

// A frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.

// Given a list of stones' positions (in units) in sorted ascending order, determine if the frog is able to cross the river by landing on the last stone. Initially, the frog is on the first stone and assume the first jump must be 1 unit.

// If the frog's last jump was k units, then its next jump must be either k - 1, k, or k + 1 units. Note that the frog can only jump in the forward direction.

// Note:

// The number of stones is ≥ 2 and is < 1,100.
// Each stone's position will be a non-negative integer < 231.
// The first stone's position is always 0.


// Solution One

// Use map to represent a mapping from the stone (not index) to the steps that can be taken from this stone.

// so this will be

// [0,1,3,5,6,8,12,17]


0  1 _ 3 _ 5  6 _ 8 _ _ _ 12

// {17=[], 0=[1], 1=[1, 2], 3=[1, 2, 3], 5=[1, 2, 3], 6=[1, 2, 3, 4], 8=[1, 2, 3, 4], 12=[3, 4, 5]}





// Notice that no need to calculate the last stone.

// On each step, we look if any other stone can be reached from it, if so, we update that stone's steps by adding step, step + 1, step - 1. If we can reach the final stone, we return true. No need to calculate to the last stone.


public class Solution {
    public boolean frogJump(int[] stones) {
        HashMap<Integer, HashSet<Integer>> map = new HashMap<Integer, HashSet<Integer>>();
        map.put(0, new HashSet<Integer>());
        map.get(0).add(1);
        
         
        for (int i = 0; i < stones.length; i++) {
            map.put(stones[i], new HashSet<Integer>());
        }
//   // { 0=[1], 1=[1, 2], 3=[] ...  
// [0,1,10]
        for (int i = 0; i < stones.length - 1; i++) {
            int stone = stones[i];
            for (int step : map.get(stone)) {
                int reach = step + stone;
                if (reach == stones[stones.length - 1]) {
                    return true;
                }
                if (map.containsKey(reach)) {
                    map.get(reach).add(step + 1);
                    map.get(reach).add(step);
                    if (step - 1 > 0) map.get(reach).add(step - 1);
                }
            }
        }
        return false;
    }
}

// Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words. You may assume the dictionary does not contain duplicate words.

// For example, given
// s = "leetcodeleet",
// dict = ["leet", "code", "apple"].

// Return true because "leetcode" can be segmented as "leet code".
           i
   l e e t c o d e
  [t _ _ _ t _ _ _ t]
                 j    
public class Solution {
    public boolean wordBreak(String s, HashSet<String> dict) {
        boolean[] dp = new boolean dp[s.length() + 1];
        // do we have better way?
        // Arrays.fill(dp, false);
        dp[s.length()] = true; 
        for (int i = s.length() - 1; i >= 0; i-- ) {
        
            for (int j = i; j < s.length(); j++) {
                String substring = s.substring(i, j + 1);
                if (wordDict.contains(substring) && dp[j + 1]) {
                    dp[i] = true;
                    // Q:What does this break do?
                    break;
                }
            }
        }
        return dp[0];
    }
}


/*
Best Time to Buy and Sell Stock I
Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.
*/

/*
双指针法
复杂度
时间 O(N) 空间 O(1)

思路
根据买卖股票的特性，我们必须先低价买，再高价卖，这个找最大收益的过程实际上是找到目前为之的最低价。在遍历价格数组时，根据这个动态更新的最低价和当前的价格可以算出当前卖股票最大能赚多少钱。

代码

*/
    [5  , 4 ,  6 ,  3 , 7,   8]
                               fast
                   slow

max: min  -1   2    2   4    5    


public class Solution {
    public int maxProfit(int[] prices) {
        int min = Integer.MAX_VALUE, res = 0;
        for(int i = 0 ; i < prices.length; i++){
            if(prices[i]<min) min = prices[i];
            if((prices[i]-min)>res) res = prices[i] - min;
        }
        return res;
    }
}

/*
Best Time to Buy and Sell Stock II
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
贪心法
复杂度
时间 O(N) 空间 O(1)

思路
既然能买卖任意次，那最大收益的方法就是尽可能多的低入高抛。只要明天比今天价格高，就应该今天买入明天再卖出。

代码
*/

    [5  , 4 ,  6 ,  3 , 7,   8]
                                i
sum  0    0    2    2  2+4  6+1 


    [1,  2 ,  3 ,  4 ,  7]
sum  0   1    2    3    6




public class Solution {
    public int maxProfit(int[] prices) {
        int sum = 0;
        for(int i = 1; i < prices.length; i++){
            if(prices[i]>prices[i-1]) sum += prices[i] - prices[i-1];
        }
        return sum;
    }
}



Best Time to Buy and Sell Stock III
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note: You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
双向动态规划
复杂度
时间 O(N) 空间 O(N)

思路
最简单的方法就是对每一个时间点，将其所有两边的数组都执行一次Best Time to Buy and Sell Stock I的解法，但这会带来O(N^2)的时间复杂度。实际上当计算prices[0]到prices[i]的最大收益时，我们已经计算过prices[0]到prices[i-1]的最大收益了，prices[0]到prices[i]的最大收益应该是当前卖出能获得的最大收益和prices[0]到prices[i-1]的最大收益中，二者较大的那个。我们可以利用这个之前计算的结果降低时间复杂度（不过代价是额外空间），所以需要把prices[0]到prices[i]的最大收益存在left[i]数组中。具体解法和I是一样的，也是维护一个前半段最小值。

分别得出以i点为分割点，左半段最大收益的数组left，和右半段最大收益的数组right后，我们就可以遍历一遍这两个数组，找出最大的left+right组合。实际上，该解法就是将I的解法双向各执行一遍并记录结果。

代码


    [5  , 4 ,  6 ,  3 , 7,   8]
               i


public class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length == 0) return 0;
        int[] left = new int[prices.length];
        int[] right = new int[prices.length];
        int leftMin = prices[0];
        int rightMax = prices[prices.length-1];
        int sum = 0;
        //计算左半段最大收益
        for(int i = 1 ; i < prices.length; i++){
            leftMin = Math.min(prices[i], leftMin);
            left[i] = Math.max(prices[i] - leftMin, left[i-1]);
        }
        //计算右半段最大收益
        for(int i = prices.length - 2 ; i >= 0; i--){
            rightMax = Math.max(prices[i], rightMax);
            right[i] = Math.max(rightMax - prices[i], right[i+1]);
        }
        //找出两次交易最大收益组合
        for(int i = 0 ; i < prices.length; i++){
            if((left[i]+right[i])>sum) sum = left[i]+right[i];
        }
        return sum;
    }
