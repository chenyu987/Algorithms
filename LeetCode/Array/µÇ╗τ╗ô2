
/**
* Assume you have an array of length n initialized with all 0's and are given k update operations.
* 
* Each operation is represented as a triplet: [startIndex, endIndex, inc] which increments each element of subarray A[startIndex ... endIndex] (startIndex and endIndex inclusive) with inc.
* 
* Return the modified array after all k operations were executed.
* 
* Example:
* 
* Given:
* 
*     length = 5,
*     updates = [
*         [1,  3,  2],
*         [2,  4,  3],
*         [0,  2, -2]
*     ]
* 
* Output:
* 
*     [-2, 0, 3, 5, 3]
* Explanation:
* 
* Initial state:
* [ 0, 0, 0, 0, 0 ]
* 
* After applying operation [1, 3, 2]:
* [ 0, 2, 2, 2, 0 ]
* 
* After applying operation [2, 4, 3]:
* [ 0, 2, 5, 5, 3 ]
* 
* After applying operation [0, 2, -2]:
* [-2, 0, 3, 5, 3 ]
*/

/*
跟算法无关，这是个数学题
思想是把所有需要相加的值存在第一个数，然后把这个范围的最后一位的下一位(end+1)减去这个inc, 
这样在这个范围在求最终值的时候，都可以加上这个inc，而后面的数(end位之后的位)就不会加上inc
*/

[ 0, 2, 0, 0, -2 ]
[ 0, 2, 3, 0, -2 ]
[-2, 2, 3, 2, -2 ]

sum = 0;
sum = 0;
sum = 3;
sum = 5;
sum = 5  -2 = 3;

[-2, 0, 3, 5, 3]

public class RangeAddition {
  public int[] getModifiedArray(int length, int[][] updates) {
    if (length < 0) return null;
    int[] res = new int[length];
    for (int i = 0; i < updates.length; i++) {
      int start = updates[i][0];
      int end = updates[i][1];
      int inc = updates[i][2];
      res[start] += inc;
      if (end < length - 1) {
        res[end+1] -= inc;
      }
    }
    int sum = 0;
    for (int i = 0; i < length; i++){
      sum += res[i];
      res[i] = sum;
    }
    return res;
  } 
}


/**
* You are given an n x n 2D matrix representing an image.
* 
* Rotate the image by 90 degrees (clockwise).
* 
* Follow up:
* Could you do this in-place?
*/

/*
solution 1
复杂度
时间O(n^2) 空间O(1)

思路：转置镜像法
step 1: transpose the matrix: matrix[i][j] <-> matrix[j][i](转置)
step 2: flip each row of transposed matrix(镜像)
*/

1 2 3 4  
6 7 8 9
x y z a
q w e r


public class RotateImage {
  public void rotate(int[][] matrix) {
    if (matrix == null || matrix.length == 0) {
      return;
    }
    int rowNum = matrix.length;
    int colNum = rowNum;
    // transpose the matrix
    for (int i = 0; i < rowNum; i++) {
      for (int j = i + 1; j < colNum; j++) {
        swap(i, j, matrix);
      }
    }
    // flip each row of transposed matrix
    for (int i = 0; i < rowNum; i++) {
      for (int j = 0; j < colNum / 2; j++) {
        flip(i, j, matrix);
      }
    }
  }
  
  private void swap(int i, int j, int[][] matrix) {
    int tmp = matrix[i][j];
    matrix[i][j] = matrix[j][i];
    matrix[j][i] = tmp;
  }
  
  private void flip(int i, int j, int[][] matrix) {
    int colNum = matrix[0].length;
    int tmp = matrix[i][j];
    matrix[i][j] = matrix[i][colNum-j-1];
    matrix[i][colNum-j-1] = tmp;
  }
}

/**
* Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
* 
* Integers in each row are sorted from left to right.
* The first integer of each row is greater than the last integer of the previous row.
* For example,
* 
* Consider the following matrix:
* 
* [
*   [1,   3,  5,  7],
*   [10, 11, 16, 20],
*   [23, 30, 34, 50]
* ]
* Given target = 3, return true.
*/

/*
复杂度
时间O(logn) 空间O(1)

思路：二分查找
先从第一列二分查找目标值可能在哪里行 然后在可能的那一行再进行二分查找
*/

public class SearchA2DMatrix {
  public boolean searchMatrix(int[][] matrix, int target) {
    if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return false;
    int left = 0;
    int right = matrix.length - 1;
    while (left <= right) { //??
      int mid = left + (right - left) / 2; //防止溢出
      if (matrix[mid][0] == target) return true;
      if (matrix[mid][0] > target) right = mid - 1;
      else {
        left = mid + 1;
      }
    }
    int row = right;
    if (row < 0) return false;
    left = 0;
    right = matrix[0].length - 1;
    while (left <= right) {
      int mid = left + (right - left) / 2;
      if (matrix[row][mid] == target) return true;
      if (matrix[row][mid] > target) right = mid - 1;
      else {
        left = mid + 1;
      }
    }
    return false;
  }
}

输入矩阵等价于下面的表达方式：
[1, 3,  5,  7]  [10, 11, 16, 20]  [23, 30, 34, 50]



public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        if(m == 0) return false;
        int n = matrix[0].length;
        int min = 0, max = m * n - 1;
        while(min <= max){
            int mid = min + (max - min) / 2;
            int row = mid / n; //
            int col = mid % n; //
            if(matrix[row][col] == target){
                return true;
            } else if (matrix[row][col] < target){
                min = mid + 1;
            } else {
                max = mid - 1;
            }
        }
        return false;
    }
}

/**
* Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in place.
* 
* click to show follow up.
* 
* Follow up:
* Did you use extra space?
* A straight forward solution using O(mn) space is probably a bad idea.
* A simple improvement uses O(m + n) space, but still not the best solution.
* Could you devise a constant space solution?
*/

/*
复杂度
时间：O(n^2) 空间O(1)

思路：
要达到in place的效果,就要利用输入矩阵进行记录"零"的信息
如果某个位置出现了零,就把这个元素所在行和列的第一个元素置为零,相当于一个indicator
但是这样做就把第一行和第一列的元素破坏了,无法知道到底第一行和第一列的零是重置的还是自带的
所以还要维护两个标致量针对第一行和第一列特殊处理
*/

if (f == 0) -> set b = 0, e = 0;
  
a b c d
e f g h
i j k l 
q w e r




public class SetMatrixZeroes {
  public void setZeroes(int[][] matrix) {
    if (matrix == null || matrix.length == 0) return;
    boolean rowFlag = false;
    boolean colFlag = false;
    
    for (int i = 0; i < matrix.length; i++) {
      if (matrix[i][0] == 0) {
        colFlag = true;
        break;
      }  
    }
    for (int j = 0; j < matrix[0].length; j++) {
      if (matrix[0][j] == 0) {
        rowFlag = true;
        break;
      }
    }
    
    for (int i = 1; i < matrix.length; i++) {
      for (int j = 1; j < matrix[0].length; j++) {
        if (matrix[i][j] == 0) {
          matrix[i][0] = 0;
          matrix[0][j] = 0;
        }
      }
    }
    
    for (int i = 1; i < matrix.length; i++) {
      for (int j = 1; j < matrix[0].length; j++) {
        if (matrix[i][0] == 0 || matrix[0][j] == 0) {
          matrix[i][j] = 0;
        }
      }
    }
    
    if (rowFlag == true) {
      for (int j = 0; j < matrix[0].length; j++) {
        matrix[0][j] = 0;
      }
    }
    if (colFlag == true) {
      for (int i = 0; i < matrix.length; i++) { 
        matrix[i][0] = 0;
      }
    }
    return;
  }
}


/**
* Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.
* 
* For example,
* Given the following matrix:
* 
* [
*  [ 1, 2, 3 ],
*  [ 4, 5, 6 ],
*  [ 7, 8, 9 ]
* ]
* You should return [1,2,3,6,9,8,7,4,5].
*/

/*
复杂度
时间:O(nm)  空间O(1)

思路：顺序展开 
维护四个变量 row, col, x, y
按照"右 下 左 上"的顺序展开原矩阵 每经过一圈展开 更新四个变量:x和y各加1，row和col各减2
如果只剩下一行或者一列 直接把该行/列加入结果集 
*/

public class SpiralMatrix {
  public List<Integer> spiralOrder(int[][] matrix) {
    List<Integer> res = new ArrayList<Integer>();
    if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return res;
    int row = matrix.length;
    int col = matrix[0].length;
    int x = 0; 
    int y = 0;

    while (row > 0 && col > 0) {
      // if one row/col left, just add items into List res
      if (row == 1) {
        for (int j = 0; j < col; j++) {
          res.add(matrix[x][y++]);
        }
        break;
      }
      if (col == 1) {
        for (int i = 0; i < row; i++) {
          res.add(matrix[x++][y]);
        }
        break;  
      }
      // below process is a circle 
      // from top to right
      for (int i = 0; i < col - 1; i++) {
        res.add(matrix[x][y++]);
      }
      // from right to down 
      for (int i = 0; i < row - 1; i++) {
        res.add(matrix[x++][y]);
      }
      // from down to left 
      for (int i = 0; i < col - 1; i++) {
        res.add(matrix[x][y--]);
      }
      // from left to top
      for (int i = 0; i < row - 1; i++) {
        res.add(matrix[x--][y]);
      }
      x++;
      y++;
      row -= 2;
      col -= 2;       
    }
    return res;    
  }
}


/**
* Given an integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.
* 
* For example,
* Given n = 3,
* 
* You should return the following matrix:
* [
*  [ 1, 2, 3 ],
*  [ 8, 9, 4 ],
*  [ 7, 6, 5 ]
* ]
*/

/*
复杂度
时间：(n^2) 空间O(1)

思路：旋转打印 
注意如果n为奇数 最后中心点不会在循环中被打印 需要在跳出循环后单独打印
*/

public class SpiralMatrixII {
  public int[][] generateMatrix(int n) {
     if (n < 0) {
      return null;
    }        
    int[][] res = new int[n][n];
    if (n == 0) {
      return res;
    }
    if (n == 1) {
      res[0][0] = 1;
      return res;
    }
    
    int k = 1;
    int top = 0, right = n - 1, left = 0, bottom = n - 1;
    while (left < right && top < bottom) {
      for (int j = left; j < right; j++) {
        res[left][j] = k++;
      }
      for (int i = top; i < bottom; i++) {
        res[i][right] = k++;
      }
      for (int j = right; j > left; j--) {
        res[bottom][j] = k++;
      }
      for (int i = bottom; i > top; i--) {
        res[i][left] = k++;
      }
      top++;
      left++;
      right--;
      bottom--;
    }
    if (n % 2 == 1) { //
      res[n/2][n/2] = k;
    }
    return res;
  } 
}


/**
* Given a sorted integer array without duplicates, return the summary of its ranges.
* 
* For example, given [0,1,2,4,5,7], return ["0->2","4->5","7"].
*/

/*
给定排序数组 
N<a1,a2,a3,...,an>,ai<ai+1,0≤i≤n-1， 
如果N为空或者没有任何数，直接返回空元素List 
如果N不为空，如果a[i]+1≠a[i+1]，则ai一定为某个范围起点，a[i+1]一定为某个范围终止点。

特殊考虑 
- 第一个元素一定是某个起点，最后一个元素一定是某个范围的终点。 
- 如果起点和终点相同，不需要打印箭头

扫描一遍数组：
T(n) = O(n) 
*/

public class SummaryRanges {
  public List<String> summaryRanges(int[] nums) {
    List<String> res = new ArrayList<String>();
    if (nums == null || nums.length == 0) {
      return res;
    }
    
    for (int i = 0; i < nums.length; i++) {
      int front = nums[i];
      String frontStr = Integer.toString(front);
      
      while (i+1 < nums.length && nums[i+1] == nums[i]+1) {
        i++;
      }
      
      if (nums[i] != front) {
        res.add(frontStr + "->" + Integer.toString(nums[i]));
      } else {
        res.add(frontStr);
      }
      
    }
    return res;
  }
} 


/**
* Given an unsorted array nums, reorder it in-place such that nums[0] <= nums[1] >= nums[2] <= nums[3]....
* 
* For example, given nums = [3, 5, 2, 1, 6, 4], one possible answer is [1, 6, 2, 5, 3, 4].
*/

/*
solution 1: 
时间 O(NlogN) 空间 O(1)

思路: 排序+找规律
根据题目的定义，摇摆排序的方法将会很多种。我们可以先将数组排序，这时候从第3个元素开始，将第3个元素和第2个元素交换。
然后再从第5个元素开始，将第5个元素和第4个元素交换，以此类推。就能满足题目要求。

*/
 
1 3 5 7 9 10 

1 5 3 9 7 10
 
public class WiggleSort {
  public void wiggleSort(int[] nums) {
    if(nums == null || nums.length == 0) return;
    //first sort the array 
    Arrays.sort(nums); 
    for (int i = 2; i < nums.length; i+=2) {
      int tmp = nums[i];
      nums[i] = nums[i-1];
      nums[i-1] = tmp;
    }
  }
}

/*
solution 2:
时间 O(N) 空间 O(1)

思路:找规律
题目对摇摆排序的定义有两部分：

如果i是奇数，nums[i] >= nums[i - 1]
如果i是偶数，nums[i] <= nums[i - 1]
所以我们只要遍历一遍数组，把不符合的情况交换一下就行了。具体来说，如果nums[i] > nums[i - 1]， 
则交换以后肯定有nums[i] <= nums[i - 1]。
*/

3, 5, 2, 1, 6, 4
                 i 
3, 5, 1, 2 
3, 5, 1, 6, 2, 4


public class WiggleSort {
  public void wiggleSort(int[] nums) {
    if(nums == null || nums.length == 0) return;
    for (int i = 1; i < nums.length; i++) {
      // needs to swap when following conditions:
      // 1. nums[i] < nums[i-1] for odd i 
      // 2. nums[i] > nums[i-1] for even i
      if ((i%2 == 1 && nums[i] < nums[i-1]) || (i%2 == 0 && nums[i] > nums[i-1])) {
        int tmp = nums[i-1];
        nums[i-1] = nums[i];
        nums[i] = tmp;    
      }
    }
  }
}

