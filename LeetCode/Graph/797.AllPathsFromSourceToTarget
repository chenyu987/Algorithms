/*
Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

 

Example 1:


Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
Example 2:


Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]

*/

class Solution {
	//存放最终符合条件的结果
    List<List<Integer>> res = new ArrayList<>();

    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
		//存放一次遍历中符合条件的路径
        List<Integer> path = new ArrayList<>();
        dfs(path, 0, graph);
        return res;
    }

    public void dfs(List<Integer> path, int i,int[][] graph) {
		//找到最后一个节点，将路径加入结果集中
        if (i == graph.length - 1){
            path.add(i);
            res.add(new ArrayList<>(path));
            path.remove(path.size() - 1);
            return;
        }

		//当前节点加入路径
        path.add(i);
        for (int j : graph[i]) {
			//遍历当前节点的全部邻接点
            dfs(path, j, graph);
        }
		//移出当前节点
        path.remove(path.size() - 1);

        return;
    }
}
